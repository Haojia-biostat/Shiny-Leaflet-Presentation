---
title: "Leaflet + Shiny"
subtitle: "PHS 7045: Advanced Programming"
author: "Haojia Li, MS"
format:
    revealjs:
      embed-resources: true
      slide-number: true
      scrollable: true
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = T, warning = F, message = F)
slides_eval <- TRUE
```

# Intro

## Kick off

![](spongebob-squarepants.jpg)

::: {style="font-size: 20pt"}

To wrap our heads around things, let's start by diving into the 
[COVID-19 tracker app](https://shiny.rstudio.com/gallery/covid19-tracker.html) 
and getting a feel for what it's all about!

:::

## Plan for today

::: {style="font-size: 20pt"}

What we'll be using

1. **Leaflet**: "Create Interactive Web Maps with the JavaScript 'Leaflet' Library" 
([read more](https://cran.r-project.org/web/packages/leaflet/)).

2. **plotly**: "Create Interactive Web Graphics via 'plotly.js'" 
([read more](https://cran.r-project.org/web/packages/plotly/))

3. **DT**: "A Wrapper of the JavaScript Library 'DataTables'" 
([read more](https://cran.r-project.org/web/packages/DT/))

4. **shiny**: "Web Application Framework for R" 
([read more](https://cran.r-project.org/web/packages/shiny/))

We will adopt the the practice in Part 3, 
[Lab 3](https://uofuepibio.github.io/PHS7045-advanced-programming/week-03-lab.html), 
visualizing the representative USAF station(s) for weather conditions.

:::

# Data preparation

## 1. Read-in and data combination

::: {style="font-size: 20pt"}

The met data contains the records of weather conditions, 
including wind speed, temperature, dew point, atmospheric pressure, and relative humidity, 
at USAF stations in August 2019.

```{r}
# ---- load data.table package ----
library(data.table)

# ---- set up weathers ----
weathers_var <- c("wind.sp", "temp", "dew.point", "atm.press", "rh")
weathers_label <- c("Wind speed", "Temperature", "Dew point", "Atmospheric pressure", "Relative humidity")
weathers_unit <- c(" km/h", "&#8451;", "&#8451;", " hPa", "%")

# ---- met data read-in and processing ----
met <- fread("https://raw.githubusercontent.com/USCbiostats/data-science-data/master/02_met/met_all.gz")
# select columns
met <- met[, c("USAFID", "day", "hour", weathers_var), with = F]

# ---- station data read-in and processing ----
stations <- fread("ftp://ftp.ncdc.noaa.gov/pub/data/noaa/isd-history.csv")
# filter stations in US and select columns
stations <- stations[CTRY == "US", .(USAF, `STATION NAME`, STATE, LON, LAT)]

# drop NAs (999999) in USAF
stations[, USAF := as.integer(USAF)]
stations[, USAF := fifelse(USAF == 999999, NA_integer_, USAF)]
stations <- stations[!is.na(USAF)]

# drop NAs in STATE
stations[, STATE := fifelse(STATE == "", NA_character_, STATE)]
stations <- stations[!is.na(STATE)]

# keep only one data point for each USAF
stations[, n := 1:.N, by = .(USAF)]
stations <- stations[n == 1,][, n := NULL]

# ---- merge station into met ----
met <- merge(met, stations, by.x = "USAFID", by.y = "USAF", all.x = T)
```

:::

## 2. Data aggregation

::: {style="font-size: 20pt"}

We want to calculate the median value of weather conditions at different levels: station, state, and country.

```{r}
# number of records and median value of weathers at station level
met_station <- met[, c(.N, lapply(.SD, median, na.rm = T)), 
                   by = .(USAFID, STATE, `STATION NAME`, LON, LAT),
                   .SDcols = weathers_var]

# median value of weathers at state level
met_state <- met[, lapply(.SD, median, na.rm = T), by = STATE,.SDcols = weathers_var]
# merge state-level median values
met_station <- merge(met_station, met_state, by = "STATE", suffixes = c(".station", ".state"))

# median value of weathers at country level
met_us <- met[, lapply(.SD, median, na.rm = T), .SDcols = weathers_var]
# add country-level median values
colnames(met_us) <- paste0(colnames(met_us), ".us")
met_station <- cbind(met_station, met_us)

library(kableExtra)
kable(met_station, row.names = T) |> kable_styling(font_size = 12) |> scroll_box(width = "100%", height = "150px")
```

:::

## 3. Identify representative station(s) 

::: {style="font-size: 20pt"}

Write a function to identify the representative station(s), at state or country level,  by euclidean distance. 
User can specify the weather condition(s) of interest and number and/or percentage of the representative.

```{r}
sta_represent <- function(
    weathers = weathers_var, # weather conditions of interest
    top_n = 3, # number of representative stations
    top_perc = 10, # upper limit of percentage for representatives
    level = c("state", "us") # at which level to identify representatives
) {
  weathers <- match.arg(weathers, several.ok = T)
  level <- match.arg(level)
  
  fdata <- copy(met_station)
  
  # calculate euclidean distance
  fdata$weather_dist <- sqrt(rowSums(
    (as.matrix(fdata[, paste0(weathers, ".", "station"), with = F]) - 
       as.matrix(fdata[, paste0(weathers, ".", level), with = F])) ^ 2,
  ))
  
  # identify the representative station by distance and number of records
  if(level == "state")
    res <- fdata[order(weather_dist, -N), head(.SD, min(top_n, ceiling(.N * top_perc/100))), 
                 by = STATE]
  if(level == "us")
    res <- fdata[order(weather_dist, -N), head(.SD, min(top_n, ceiling(.N * top_perc/100)))]
  
  # add text to be used as popup
  res$text <- paste0(
    "USAFID: ", res$USAFID, "<br>", 
    "Name: ", res$`STATION NAME`, "<br>",
    "Number of records: ", res$N, "<br>",
    sapply(weathers, \(x) {
      paste0(weathers_label[match(x, weathers_var)], ": ",
             unlist(res[, paste0(x, ".station"), with = F]) |> round(1),
             weathers_unit[match(x, weathers_var)], "<br>")
    }) |> apply(1, paste, collapse = ""),
    "Distance score: ", round(res$weather_dist, 1)
  )
  
  # drop missing values
  res <- res[!is.na(weather_dist), ]
  return(res)
}
```

:::

# Leaflet: Create Interactive Web Maps

## 0. Overview

::: {style="font-size: 20pt"}

[Leaflet](https://leafletjs.com/) is one of the most popular open-source JavaScript libraries for interactive maps.

The [`leaflet`](https://rstudio.github.io/leaflet/) R package makes it easy to integrate and control Leaflet maps in R.

You can use this package at the R console, within R Markdown documents, and within Shiny applications.

```{r}
# load leaflet
if(!require("leaflet", quietly = TRUE)) install.packages("leaflet")
library(leaflet)
```

There are several forms of spatial data which can be processed by leaflet. 
We will only focus on data frame with lng/lat columns from base R.

The essential steps to build a Leaflet map include: 

1. Create a map widget by calling `leaflet()`;

2. Set up basemaps by `addTiles()` or `addProviderTiles()`;

3. Manipulate the attributes of the map widget using methods such as `setView()`;

3. Add components, such as `addMarkers()`, `addCircles()`, and `addLayersControl()`;

4. Print the map widget to display it.

:::

## 1. Create a map widget

::: {style="font-size: 20pt"}

We can create a map widget by simply calling `leaflet()`.

```{r, out.width="100%", out.height="400px"}
m <- leaflet()
m
```

:::

## 2. Set up basemaps by `addTiles()`

::: {style="font-size: 20pt"}

The easiest way to add tiles is by calling `addTiles()` with no arguments; 
by default, [OpenStreetMap](https://www.openstreetmap.org/#map=2/13.2/-113.3) tiles are used.

```{r, out.width="100%", out.height="400px"}
m |> addTiles()
```

:::

## 2. Set up basemaps by `addProviderTiles()`

::: {style="font-size: 20pt"}

Alternatively, many popular free third-party basemaps can be added using the `addProviderTiles()` function, 
which is implemented using the leaflet-providers plugin. 
See [here](http://leaflet-extras.github.io/leaflet-providers/preview/index.html) for the complete set. 
You can use `names(providers)` to view all of the options.

```{r, out.width="100%", out.height="400px"}
m <- leaflet() |> addProviderTiles(providers$CartoDB.Positron)
m
```

:::

## 3. Map methods

::: {style="font-size: 20pt"}

- `setView()` sets the center of the map view and the zoom level;
- `fitBounds()` fits the view into the rectangle [lng1, lat1] â€“ [lng2, lat2];
- `clearBounds()` clears the bound, so that the view will be automatically determined 
by the range of latitude/longitude data in the map layers if provided.

```{r, out.width="100%", out.height="400px"}
m |> setView(lng = -111.8272, lat = 40.7648, zoom = 17)
```

:::

## 4. `addMarkers()`

::: {style="font-size: 20pt"}

Let's start with considering all the weather conditions at country level.

```{r, out.width="100%", out.height="400px"}
# identify the top 5 or top 10% representative stations for all the weather conditions in the US
all_us5 <- sta_represent(weathers = weathers_var, top_n = 5, level = "us")
m <- m |> addMarkers(
  data = all_us5, 
  lng = ~LON, lat = ~LAT, popup = ~text,
  group = "All"
)
m
```

:::

## 4. `addCircles()`

::: {style="font-size: 20pt"}

Next, add circles of which the size show the number of observations and the color show the distance score 
for the top 10 or 10% representative stations in each state.

```{r, out.width="100%", out.height="400px"}
# identify the 10 most representative stations for all the weather conditions
all_state10 <- sta_represent(weathers = weathers_var, top_n = 10)

# set color palette
library(RColorBrewer)
dist.pal <- colorNumeric(palette = "YlGnBu", domain = c(0,10))

m <- m |>
  addCircles(
    data = all_state10, 
    lng = ~LON, lat = ~LAT, popup = ~text,
    weight = 1, radius = ~N*100, fillOpacity = 0.8, color = ~dist.pal(weather_dist), 
    group = "All"
  ) |>
  addLegend(
    position = "bottomleft", 
    pal = dist.pal, values = c(0, 10), opacity = 1, 
    title = "Distance score"
  )
m
```

:::

## 4. `addLayersControl()`

::: {style="font-size: 20pt"}

Lastly, for each individual weather condition, add top 3 in the US, and top 1 in each state.

```{r, out.width="100%", out.height="400px"}
each_us3_list <- lapply(weathers_var, sta_represent, top_n = 3, level = "us")
each_state1_list <- lapply(weathers_var, sta_represent)
for(i in 1:length(weathers_var)) {
  m <- m |>
    addMarkers(
      data = each_us3_list[[i]], lng = ~LON, lat = ~LAT, popup = ~text, 
      group = weathers_label[i]
    ) |>
    addCircles(
      data = each_state1_list[[i]], lng = ~LON, lat = ~LAT, popup = ~text, 
      weight = 1, radius = ~N*100, fillOpacity = 0.8, color = ~dist.pal(weather_dist), 
      group = weathers_label[i]
    )
}  
m <- m |>
  addLayersControl(
    baseGroups = c("All", weathers_label), position = "bottomright", options = layersControlOptions(collapsed = F)
  )
m
```

:::

# Shiny: Web Application Framework for R

## 0. Motivations

::: {style="font-size: 20pt"}

Think about the following problems:

1. The static leaflet is interactive, however limited. The developer need to have all the results computed locally.

2. We only included 6 layers in the static leaflet. However, given that there are 5 weather conditions, 
theoretically we can have up to $2^5-1$ combinations of potential interest.

3. The user might want to adjust the number of representatives to be identified.

4. We visualized global weather condition of each station, state and the United States in August 2019, 
but we might be interested in how the weather, then the representative station(s), changed in the 31 days of the month. 

5. We might also interested in the weather during a certain period of the day, for example from 8 am to 12 pm in the morning.

6. ...

:::

## 1. Intro to Shiny

::: {style="font-size: 20pt"}

[Shiny](https://shiny.rstudio.com/) is an R package that makes it easy to build interactive web apps straight from R. 
You can host standalone apps on a webpage or embed them in R Markdown documents or build 
[dashboards](http://rstudio.github.io/shinydashboard/?_gl=1*fbrgev*_ga*MTUzMjIwMDA3OC4xNjY0OTg1MjEz*_ga_8QJS108GF1*MTY4MjAxMjkxOC4xMy4xLjE2ODIwMTMwMjEuMC4wLjA.*_ga_2C0WZ1JHG0*MTY4MjAxMjkxOC4xMy4xLjE2ODIwMTMxMDMuMC4wLjA.). 
You can also extend your Shiny apps with [CSS themes](http://rstudio.github.io/shinythemes/?_gl=1*btbeqj*_ga*MTUzMjIwMDA3OC4xNjY0OTg1MjEz*_ga_8QJS108GF1*MTY4MjAxMjkxOC4xMy4xLjE2ODIwMTMwMjEuMC4wLjA.*_ga_2C0WZ1JHG0*MTY4MjAxMjkxOC4xMy4xLjE2ODIwMTMxMDMuMC4wLjA.), 
[htmlwidgets](http://www.htmlwidgets.org/), 
and JavaScript [actions](https://github.com/daattali/shinyjs/blob/master/README.md).

```{r}
# load shiny
if(!require("shiny", quietly = TRUE)) install.packages("shiny")
library(shiny)
```

You can find a myriad of Shiny apps to be inspired by and to learn from
[Shiny Gallery](https://shiny.rstudio.com/gallery/).

[rstudio](https://github.com/rstudio) also has the [shiny-examples](https://github.com/rstudio/shiny-examples) repository on github 
including 188 examples.

```{r, eval=FALSE}
runGitHub("shiny-examples", "rstudio", subdir = "001-hello")
```

You can also try  `runExample()` to launch Shiny example applications.

```{r, eval=FALSE}
runExample("02_text")
```

Shiny also provides good resources of [tutorial](https://shiny.rstudio.com/tutorial/) for developers at different levels.

:::

## 2. Structure of a Shiny App

::: {style="font-size: 20pt"}

Shiny apps are contained in a single script called `app.R`. 
The script `app.R` lives in a directory (for example, `newdir/`) and the app can be run with `runApp("newdir")`.

`app.R` has four components:

```{r, eval=FALSE}
# start with loading the `shiny` package;
library(shiny)
# a user interface object
ui <- ...
# a server function
server <- function(input, output, ...) {
  ...
}
# a call to the shinyApp function
shinyApp(ui = ui, server = server)
```

The user interface (`ui`) object controls the layout and appearance of your app. 
The `server` function contains the instructions that your computer needs to build your app. 
Finally the `shinyApp` function creates Shiny app objects from an explicit UI/server pair.

Once you open the `app.R` script in your RStudio editor, 
RStudio will recognize the Shiny script and provide a Run App button (at the top of the editor). 
Either click this button to launch your app or use the keyboard shortcut: 
Command+Shift+Enter on Mac / Control+Shift+Enter on Windows.

:::

## 3. Build a user interface

::: {style="font-size: 20pt"}

The application layout section in [Shiny Gallery](https://shiny.rstudio.com/gallery/) 
demonstrates one or more of the functions you can use to organize app UI.

For the weather condition analysis, we are going to create a `bootstrapPage`, 
which creates a Shiny UI page that loads the CSS and JaveScript for [Bootstrap](https://getbootstrap.com/), 
with no content in the page body by default.

We add the `leafletOutput()` to print the Leaflet map, and use `absolutePanel()` to include a draggable control panel.

```{r, eval=FALSE}
ui <- bootstrapPage(
  tags$style(type = "text/css", "html, body {width:100%; height:100%}"),
  
  leafletOutput(outputId = "map", width = "100%", height = "100%"),
  
  absolutePanel(
    fixed = F, draggable = T,
    top = "5%", left = "5%", right = "auto", bottom = "auto", width = "auto", height = "auto",
    ...
  )
)
```

:::

## 4. Add control widgets - `checkboxGroupButtons`

::: {style="font-size: 20pt"}

[Shiny Widgets Gallery](https://shiny.rstudio.com/gallery/widget-gallery.html) displays the basic control widgets in shiny.

Furthermore, [`shinyWidgets`](https://shinyapps.dreamrs.fr/shinyWidgets/) provides custom widgets and other components to enhance your shiny applications.

For the control panel, we are going to include:

1. `checkboxGroupButtons` for the weather conditions;

```{r, eval=FALSE}
# load shinyWidgets
if(!require("shinyWidgets", quietly = TRUE)) install.packages("shiny")
library(shinyWidgets)

# add multiple check box for weather conditions
checkboxGroupButtons(
  inputId = "weathers", label = "Weather conditions", choices = weathers_label, selected = weathers_label, 
)
```  

:::

## 4. Add control widgets - `numericInput`

::: {style="font-size: 20pt"}

2. `numericInput`s for number and percentage of representative, at country level or state level;

```{r, eval=FALSE}
# input the number and percentage of the representatives at country level
fluidRow(
  column(3, numericInput(
    inputId = "us_n", label = "Country-N", value = 5, min = 1, max = 15, step = 1, width = "80%"
  )),
  column(3, numericInput(
    inputId = "us_perc", label = "Country-%", value = 10, min = 2, max = 100, step = 2, width = "80%"
  )),
  # input the number and percentage of the representatives at state level
  column(3, numericInput(
    inputId = "state_n", label = "State-N", value = 10, min = 1, max = 15, step = 1, width = "80%"
  )),
  column(3, numericInput(
    inputId = "state_perc", label = "State-%", value = 10, min = 2, max = 100, step = 2, width = "80%"
  ))
)
```

:::

## 4. Add control widgets - `sliderInput`

::: {style="font-size: 20pt"}

3. `sliderInput` for hours from 0 to 23;

4. `sliderInput` for day from 1 to 31, with animation control;

```{r, eval=FALSE}
fluidRow(
  # slider of hours
  column(6, sliderInput(
    inputId = "hours", label = "Hour", min = 0, max = 23, value = c(0, 23), step = 1
  )),
  # slider of day with animation
  column(6, sliderInput(
    inputId = "day", label = "August", min = 1, max = 31, value = 1, step = 1, animate = T
  ))
)
```

:::

## 5. Display reactive output

::: {style="font-size: 20pt"}

Add the basemaps to `output$map` first. `renderLeaflet()` renders the Leaflet map widget. 

If an R object is built by codes calling one or more widget values, the object will be reactive. 

By using `reactive()` function, we wrap a normal expression to create a reactive expression, making the result change over time.

```{r, eval=FALSE}
server <- function(input, output) {
  basemap <- reactive(
    # not yet reactive in this step
    leaflet() |>
      addProviderTiles("CartoDB.Positron") |>
      fitBounds(-123.4, 18.4, -66.1, 47.8)
  )
  output$map <- renderLeaflet({basemap()})
}
```

:::

## 6. Use reactive expressions - data

::: {style="font-size: 20pt"}

First, we need to update the station level data based on the `input$` changes.

```{r, eval=FALSE}
station_data <- reactive({
  # ensure that the values needed are available
  req(input$weathers, input$hours, input$day)
  
  w <- weathers_var[match(input$weathers, weathers_label)]
  
  met1 <- met[hour %between% input$hours & day == input$day, ]
  # number of records and median value of weathers at station level
  met_station <- met1[, c(.N, lapply(.SD, median, na.rm = T)), by = .(USAFID, STATE, `STATION NAME`, LON, LAT), 
                      .SDcols = w]
  
  # median value of weathers at state level
  met_state <- met1[, lapply(.SD, median, na.rm = T), by = STATE, .SDcols = w]
  # merge state-level median values
  met_station <- merge(met_station, met_state, by = "STATE", suffixes = c(".station", ".state"))
  
  # median value of weathers at country level
  met_us <- met1[, lapply(.SD, median, na.rm = T), .SDcols = w]
  # add suffix
  colnames(met_us) <- paste0(colnames(met_us), ".us")
  # merge country-level median values
  met_station <- cbind(met_station, met_us)
  
})
```

:::

## 6. Use reactive expressions - data (cont'd)

::: {style="font-size: 20pt"}

Second, aggregate data to country and state level. 

We use `station_data()` instead of `station_data` because it is a reactive object.

```{r, eval=FALSE}
us_data <- reactive({
  req(station_data(), input$weathers, input$us_n, input$us_perc)
  
  w <- weathers_var[match(input$weathers, weathers_label)]
  
  res <- copy(station_data())
  res$weather_dist <- sqrt(rowSums(
    (as.matrix(res[, paste0(w, ".", "station"), with = F]) -
       as.matrix(res[, paste0(w, ".", "us"), with = F])) ^ 2,
  ))
  
  res <- res[order(weather_dist),
             head(.SD, min(input$us_n, ceiling(.N * input$us_perc/100)))]
  
  res <- res[!is.na(weather_dist), ]
})

state_data <- reactive({
  req(station_data(), input$weathers, input$state_n, input$state_perc)
  
  w <- weathers_var[match(input$weathers, weathers_label)]
  
  res <- copy(station_data())
  res$weather_dist <- sqrt(rowSums(
    (as.matrix(res[, paste0(w, ".", "station"), with = F]) -
       as.matrix(res[, paste0(w, ".", "state"), with = F])) ^ 2,
  ))
  
  res <- res[order(weather_dist),
             head(.SD, min(input$state_n, ceiling(.N * input$state_perc/100))),
             by = STATE]
  
  res <- res[!is.na(weather_dist), ]
})

```

:::

## 6. Use reactive expressions - basemap and legend

::: {style="font-size: 20pt"}

Create a color palette for the fill color of circles. 

The argument `domian = ` in `colorBin()` and `values = ` in `addLegend()` are used to define possible values that can be mapped.

```{r, eval=FALSE}
colorPalette <- reactive({
  colorBin(palette = "YlOrBr", domain = state_data()$weather_dist, bins = seq(0,12,2))
})

basemap <- reactive(
  leaflet() |>
    addProviderTiles("CartoDB.Positron") |>
    fitBounds(-123.4, 18.4, -66.1, 47.8) |>
    addLegend("bottomleft", pal = colorPalette(), values = state_data()$weather_dist, title = "Distance score")
)

output$map <- renderLeaflet({basemap()})
```

:::

## 6. Use reactive expressions - event handler

::: {style="font-size: 20pt"}

Once there is any change in the `input`, the Leaflet map should update accordingly.

We use `observeEvent()` here, however, shiny recommends using `bindEvent()` since version 1.6.0.

```{r, eval=FALSE}
observeEvent(
  us_data(),
  leafletProxy("map") |>
    clearMarkers() |>
    addMarkers(
      data = us_data(), lng = ~LON, lat = ~LAT,
    ) |>
    addCircles(
      data = state_data(), lng = ~LON, lat = ~LAT,
      weight = 1, radius = ~N*1000,
      fillOpacity = 0.8, color = "#AC162C", fillColor = ~colorPalette()(weather_dist),
    )
)
observeEvent(
  state_data(),
  leafletProxy("map") |>
    clearMarkers() |>
    addMarkers(
      data = us_data(), lng = ~LON, lat = ~LAT,
    ) |>
    addCircles(
      data = state_data(), lng = ~LON, lat = ~LAT,
      weight = 1, radius = ~N*1000,
      fillOpacity = 0.8, color = "#AC162C", fillColor = ~colorPalette()(weather_dist),
    )
)
```

:::

## 7. Run the App!

## `plotly` and `DT`

::: {style="font-size: 20pt"}

[Interactive web-based data visualization with R, plotly, and shiny](https://plotly-r.com/)

[Scatter Plots on Maps in R](https://plotly.com/r/scatter-plots-on-maps/)

[DT: An R interface to the DataTables library](https://rstudio.github.io/DT/)

:::

# Thanks!
